# Docker Compose for Dynamic Stock Analyzer
# Complete multi-service deployment

version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: dsa-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATA_PROVIDER: ${DATA_PROVIDER:-}
      NSE_API_KEY: ${NSE_API_KEY:-}
      NSE_API_URL: ${NSE_API_URL:-}
      CACHE_DIR: /app/cache
      PORTFOLIOS_DIR: /app/data/portfolios
    volumes:
      - ./backend/cache:/app/cache
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dsa-network

  # Frontend web service
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3001/api}
    container_name: dsa-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dsa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  dsa-network:
    driver: bridge

volumes:
  backend-cache:
  backend-logs:
  backend-data:
