name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # Build and test C modules
  build-c-modules:
    name: Build C Modules
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc make
      
      - name: Build C shared library
        working-directory: c_modules
        run: |
          make clean
          make
      
      - name: Verify build artifacts
        run: |
          test -f c_modules/lib/libdsa.so || (echo "Library not built" && exit 1)
      
      - name: Upload C library artifacts
        uses: actions/upload-artifact@v3
        with:
          name: c-modules
          path: c_modules/lib/
          retention-days: 1

  # Build and test native Node.js addon
  build-native-addon:
    name: Build Native Addon
    runs-on: ubuntu-latest
    needs: build-c-modules
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/native/package-lock.json
      
      - name: Download C modules
        uses: actions/download-artifact@v3
        with:
          name: c-modules
          path: c_modules/lib/
      
      - name: Install dependencies
        working-directory: backend/native
        run: npm ci
      
      - name: Build native addon
        working-directory: backend/native
        run: npm run build
      
      - name: Verify addon build
        run: |
          test -f backend/native/build/Release/dsa_native.node || (echo "Addon not built" && exit 1)
      
      - name: Upload addon artifacts
        uses: actions/upload-artifact@v3
        with:
          name: native-addon
          path: |
            backend/native/build/
            backend/native/dist/
          retention-days: 1

  # Lint and test backend
  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    needs: build-native-addon
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Download C modules
        uses: actions/download-artifact@v3
        with:
          name: c-modules
          path: c_modules/lib/
      
      - name: Download native addon
        uses: actions/download-artifact@v3
        with:
          name: native-addon
          path: backend/native/
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run linter
        working-directory: backend
        run: npm run lint
      
      - name: Run unit tests
        working-directory: backend
        run: npm test
        env:
          NODE_ENV: test
      
      - name: Generate coverage report
        working-directory: backend
        run: npm run test:coverage
        continue-on-error: true
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./backend/coverage
          flags: backend

  # Lint and test frontend
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
        continue-on-error: true
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Build frontend
        run: npm run build
        env:
          VITE_API_BASE_URL: http://localhost:3001/api

  # Build Docker images
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: backend/Dockerfile
          push: false
          tags: dsa-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: frontend/Dockerfile
          push: false
          tags: dsa-frontend:test
          build-args: |
            VITE_API_BASE_URL=http://localhost:3001/api
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Verify no sample data
  verify-no-sample-data:
    name: Verify No Sample Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Make verification script executable
        run: chmod +x tools/verify_no_sample_data.sh
      
      - name: Run verification
        run: ./tools/verify_no_sample_data.sh
      
      - name: Check for violations
        run: |
          if grep -q "VIOLATION" verify_report.txt; then
            echo "Sample data found in repository!"
            cat verify_report.txt
            exit 1
          fi
